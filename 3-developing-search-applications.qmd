# Developing Search Applications

## Task: Highlight the search terms in the response of a query

### Example 1: Creating search queries w/highlighting for blog posts {.unnumbered}

***Requirements***

-   Create an index and populate it with example documents.

-   Perform a search query on the index.

-   Highlight the search terms in the response.

-   Use the Kibana Console or a REST client for all steps.

***Steps***

1.  **Open the Kibana Console** or Use a REST Client

2.  Create and Populate the Index

> POST /blog_posts/\_bulk
>
> { \"index\": { \"\_id\": \"1\" } }
>
> { \"title\": \"Introduction to Elasticsearch\", \"content\":
> \"Elasticsearch is a
>
> powerful search engine.\" } { \"index\": { \"\_id\": \"2\" } }
>
> { \"title\": \"Advanced Elasticsearch Techniques\", \"content\":
> \"This guide covers
>
> advanced features of Elasticsearch.\" }
>
> { \"index\": { \"\_id\": \"3\" } }
>
> { \"title\": \"Elasticsearch Performance Tuning\", \"content\":
> \"Learn how to optimize Elasticsearch for better performance.\" }

3.  Perform a Search Query with Highlighting

> GET /blog_posts/\_search
>
> {
>
> \"query\": {
>
> \"match\": {
>
> \"content\": \"elasticsearch\"
>
> }
>
> },
>
> \"highlight\": {
>
> \"fields\": {
>
> \"content\": {}
>
> }
>
> }
>
> }

***Test***

1.  Confirm the index exists GET /blog_posts

2.  Execute the query and confirm that the content field has
    highlighting

> { \...
>
> \"hits\": {
>
> \"hits\": \[
>
> {
>
> \"\_id\": \"1\",
>
> \"\_source\": {
>
> \"title\": \"Introduction to Elasticsearch\",
>
> \"content\": \"Elasticsearch is a powerful search engine.\"
>
> },
>
> \"highlight\": {
>
> \"content\": \[
>
> \"**\<em\>Elasticsearch\</em\>** is a powerful search engine.\"
>
> \]
>
> }
>
> }, \... // Additional documents\...
>
> \]
>
> }
>
> }

***Considerations***

-   **Field Selection**: The highlight field in the search request
    specifies which fields to highlight. In this example, we highlight
    the content field.

-   **Performance**: Highlighting can impact search performance,
    especially on large datasets. It is essential to balance the need
    for highlighting with performance considerations.

-   **Highlight Configuration**: Additional configurations, such as
    pre-tags and post-tags, can customize the highlighting format.
    ***Clean-up (optional)*** • Delete the index

> DELETE blog_posts

***Documentation***

-   [[Highlighting]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html)

-   [[Match
    Query]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)

-   [[Bulk
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html)

### Example 2: Creating search queries w/highlighting for customer order data {.unnumbered}

***Requirements***

-   An index (orders) with documents containing customer order
    information (customer_name, order_date, products, total_price)

-   A search query to retrieve orders with specific products and a total
    price range

-   Highlighting the search terms in the response, including nested
    objects (products)

***Steps***

1.  **Open the Kibana Console** or use a REST client.

2.  Create the orders index by indexing some documents

> POST /orders/\_bulk
>
> {\"index\":{\"\_id\":\"1\"}} {\"customer_name\":\"John
> Doe\",\"order_date\":\"2022-01-01\",\"products\":
>
> \[{\"name\":\"Product A\",\"price\":10.99},{\"name\":\"Product
>
> B\",\"price\":5.99}\],\"total_price\":16.98}
>
> {\"index\":{\"\_id\":\"2\"}} {\"customer_name\":\"Jane
> Smith\",\"order_date\":\"2022-01-15\",\"products\":
>
> \[{\"name\":\"Product B\",\"price\":5.99},{\"name\":\"Product
>
> C\",\"price\":7.99}\],\"total_price\":13.98}
>
> {\"index\":{\"\_id\":\"3\"}} {\"customer_name\":\"Bob
> Johnson\",\"order_date\":\"2022-02-01\",\"products\":
>
> \[{\"name\":\"Product A\",\"price\":10.99},{\"name\":\"Product
>
> C\",\"price\":7.99}\],\"total_price\":18.98}
>
> 3\. Execute a search query with highlighting
>
> POST /orders/\_search
>
> {
>
> \"query\": {
>
> \"bool\": {
>
> \"must\": \[
>
> { \"match\": { \"products.name\": \"Product A\" } },
>
> { \"range\": { \"total_price\": { \"gte\": 15, \"lte\": 20 } } }
>
> \]
>
> }
>
> },
>
> \"highlight\": {
>
> \"fields\": {
>
> \"products.name\": {},
>
> \"products.price\": {}
>
> },
>
> \"pre_tags\": \[\"\<b\>\"\],
>
> \"post_tags\": \[\"\</b\>\"\]
>
> }
>
> }

***Test***

-   Confirm the index exists GET /orders

-   Execute the query and confirm that the products.name field has
    highlighting

> {
>
> ...
>
> \"hits\": \[
>
> {
>
> \"\_index\": \"orders\",
>
> \"\_id\": \"1\",
>
> \"\_score\": 1.6536093,
>
> \"\_source\": {
>
> \"customer_name\": \"John Doe\",
>
> \"order_date\": \"2022-01-01\",
>
> \"products\": \[
>
> {
>
> \"name\": \"Product A\",
>
> \"price\": 10.99
>
> },
>
> {
>
> \"name\": \"Product B\",
>
> \"price\": 5.99
>
> }
>
> \],
>
> \"total_price\": 16.98
>
> },
>
> **\"highlight\": {**
>
> **\"products.name\": \[**
>
> **\"\<b\>Product\</b\> \<b\>A\</b\>\",**
>
> **\"\<b\>Product\</b\> B\"**
>
> **\]**
>
> **}**
>
> }, \...
>
> }

***Considerations***

-   Highlighting is used to emphasize the search terms in the response,
    making it easier to see why a document matched the query.

-   The highlight section in the search query specifies which fields to
    highlight and how to format the highlighted text.

-   Nested objects (products) are highlighted using the fields section
    with a dot notation (products.name, products.price). ***Clean-up
    (optional)*** • Delete the index

> DELETE blog_posts

***Documentation***

-   [[Highlighting]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html)

-   [[Match
    Query]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)

-   [[Bulk
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html)

-   [[Elasticsearch Search
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/8.13/search.html)

-   [[Elasticsearch Nested
    Objects]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/8.13/nested.html)

## Task: Sort the results of a query by a given set of requirements

### Example 1: Creating Search Queries w/ Sorting for e-commerce products {.unnumbered}

***Requirements***

-   Search for e-commerce product data in an index named products.

-   Sort the results by two criteria:

-   **Primary Sort:** In descending order by product price (highest to
    lowest).

-   **Secondary Sort:** In ascending order by product name
    (alphabetically).

***Steps***

1.  **Open the Kibana Console** or use a REST client.

2.  Create the products index

> PUT products
>
> {
>
> \"mappings\": {
>
> \"properties\": {
>
> \"name\": {
>
> \"type\": \"keyword\"
>
> },
>
> \"price\": {
>
> \"type\": \"float\"
>
> }
>
> }
>
> }
>
> }

3.  Index some documents

> PUT /products/\_bulk
>
> {\"index\":{},\"action\":\"index\",\"\_id\":\"1\"}
>
> {\"name\":\"Headphones\",\"price\":79.99}
>
> {\"index\":{},\"action\":\"index\",\"\_id\":\"2\"}
>
> {\"name\":\"Smartwatch\",\"price\":249.99}
>
> {\"index\":{},\"action\":\"index\",\"\_id\":\"3\"}
>
> {\"name\":\"Laptop\",\"price\":1299.99}
>
> {\"index\":{},\"action\":\"index\",\"\_id\":\"4\"}
>
> {\"name\":\"Wireless Speaker\",\"price\":99.99}

4.  Define a query to perform the primary sort

> GET /products/\_search
>
> {
>
> \"query\": {
>
> \"match_all\": {}
>
> },
>
> \"sort\": \[
>
> {
>
> \"price\": {
>
> \"order\": \"desc\"
>
> }
>
> }
>
> \]
>
> }

5\. Define a query to perform the secondary sort

> GET /products/\_search
>
> {
>
> \"query\": {
>
> \"match_all\": {}
>
> },
>
> \"sort\": \[
>
> {
>
> \"name\": {
>
> \"order\": \"asc\"
>
> }
>
> }
>
> \]
>
> }

6\. Combine the two sorts and their impact on the results

> GET /products/\_search
>
> {
>
> \"query\": {
>
> \"match_all\": {}
>
> },
>
> \"sort\": \[
>
> {
>
> \"price\": {
>
> \"order\": \"desc\"
>
> }
>
> },
>
> {
>
> \"name\": {
>
> \"order\": \"asc\"
>
> }
>
> }
>
> \]
>
> }

***Test***

-   Confirm the index exists GET /products

-   Run the search queries and examine the response

***Considerations***

-   The sort clause defines the sorting criteria.

-   An array of sort definitions is specified, prioritizing them from
    top to bottom.

-   In this example, the price field is sorted in descending order
    (desc), while the name field is sorted in ascending order (asc).
    ***Clean-up (optional)*** • Delete the index

> DELETE products

***Documentation***

-   [[Sort
    Options]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html)

## Task: Implement pagination of the results of a search query

There is only one example here as pagination is rather simple with very
few configuration options.

### Example 1: Creating pagination queries for an e-commerce product catalog {.unnumbered}

***Requirements***

-   An index named products with documents containing fields like name,
    price, category, description, etc.

-   Implement pagination to retrieve search results in batches of 10
    documents at a time.

***Steps***

1.  **Open the Kibana Console** or use a REST client.

2.  Index sample products documents

> POST /products/\_bulk
>
> {\"index\":{\"\_id\":1}}
>
> {\"name\":\"Product
>
> A\",\"price\":99.99,\"category\":\"Electronics\",\"description\":\"High-quality
>
> product\"}
>
> {\"index\":{\"\_id\":2}}
>
> {\"name\":\"Product
> B\",\"price\":49.99,\"category\":\"Books\",\"description\":\"Best-
>
> selling novel\"}
>
> {\"index\":{\"\_id\":3}}
>
> {\"name\":\"Product
>
> C\",\"price\":149.99,\"category\":\"Electronics\",\"description\":\"Top-rated
> gadget\"}
>
> {\"index\":{\"\_id\":4}}
>
> {\"name\":\"Product
>
> D\",\"price\":29.99,\"category\":\"Clothing\",\"description\":\"Stylish
> t-shirt\"}
>
> {\"index\":{\"\_id\":5}}
>
> {\"name\":\"Product
> E\",\"price\":19.99,\"category\":\"Books\",\"description\":\"Classic
> literature\"}
>
> 3\. Define the initial search query with pagination
>
> GET /products/\_search
>
> {
>
> \"query\": {
>
> \"match_all\": {}
>
> },
>
> \"sort\": \[
>
> \"\_doc\"
>
> \],
>
> \"from\": 0,
>
> \"size\": 2
>
> }
>
> This query will retrieve the first 3 documents sorted by the \_doc
> field (document ID).
>
> 4\. To retrieve the next page of results, use one of two methods:

1\. update the from field with the document count to proceed from (not
the document id)

> GET /products/\_search
>
> {
>
> \"query\": {
>
> \"match_all\": {}
>
> },
>
> \"sort\": \[
>
> \"\_doc\"
>
> \],
>
> \"from\": 2,
>
> \"size\": 2
>
> }
>
> 2\. the search_after parameter along with the sort values from the
> last hit in the previous page
>
> GET /products/\_search
>
> {
>
> \"query\": {
>
> \"match_all\": {}
>
> },
>
> \"sort\": \[
>
> \"\_doc\"
>
> \],
>
> \"size\": 2,
>
> \"search_after\": \[1\]
>
> }

***Test***

1.  Confirm the index exists GET /products

2.  Execute the initial search query to retrieve the first 2 documents

3.  Inspect the sort values in the response for the last hit

4.  Examine the results using both of the queries to return the name
    page of results

***Considerations***

-   The sort parameter is used to ensure consistent ordering of results
    across pages.

-   The \_doc field is used as a tiebreaker to ensure a stable sort
    order.

-   The size parameter specifies the number of documents to retrieve per
    page.

-   The from parameter is used for the initial query to start from the
    beginning.

-   The search_after parameter can be used for subsequent queries to
    retrieve the next page of results based on the sort values from the
    last hit or simply update the from parameter to start with the next
    group starting from a certain number of items in the search results.

***Clean-up (optional)*** • Delete the index

DELETE products ***Documentation***

-   [[Elasticsearch
    Pagination]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html)

-   [[Search After
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#request-body-search-after)

-   [[Sort Search
    Results]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html)

## Task: Define and use index aliases

### Example 1: Creating Index Aliases for Customer Data {.unnumbered}

This is an example of the simplest kind of alias.

***Requirements***

-   Create multiple indices for customer data (e.g., customers-2024-01,
    customers-2024-02).

-   Create an alias that points to these indices.

-   Use the alias to perform search operations across all customer
    indices.

***Steps***

1.  **Open the Kibana Console** or use a REST Client

2.  Create the 2 indices as a side-effect of indexing sample documents

> POST /customers-2024-01/\_bulk
>
> { \"index\": { \"\_id\": \"1\" } }
>
> { \"name\": \"John Doe\", \"email\": \"john.doe@example.com\",
> \"signup_date\": \"2024-
>
> 01-15\" }
>
> { \"index\": { \"\_id\": \"2\" } } { \"name\": \"Jane Smith\",
> \"email\": \"jane.smith@example.com\", \"signup_date\":
>
> \"2024-01-20\" } and
>
> POST /customers-2024-02/\_bulk
>
> { \"index\": { \"\_id\": \"1\" } }
>
> { \"name\": \"Alice Johnson\", \"email\":
> \"alice.johnson@example.com\",
>
> \"signup_date\": \"2024-02-05\" }
>
> { \"index\": { \"\_id\": \"2\" } } { \"name\": \"Bob Brown\",
> \"email\": \"bob.brown@example.com\", \"signup_date\":
>
> \"2024-02-10\" }
>
> 3\. Create an alias for the two indices
>
> POST \_aliases
>
> {
>
> \"actions\": \[
>
> {
>
> \"add\": {
>
> \"index\": \"customers-2024-01\",
>
> \"alias\": \"customers-current\"
>
> }
>
> },
>
> {
>
> \"add\": {
>
> \"index\": \"customers-2024-02\",
>
> \"alias\": \"customers-current\"
>
> }
>
> }
>
> \]
>
> }
>
> 4\. Execute a search query using the alias and confirm 4 documents
> returned
>
> GET /customers-current/\_search
>
> {
>
> \"query\": {
>
> \"match_all\": {}
>
> }
>
> }

***Test***

1.  Verify the alias was created GET \_alias/customers-current

2.  Confirm 4 documents returned when executing the test query

> GET /customers-current/\_search
>
> {
>
> \"query\": {
>
> \"match_all\": {}
>
> }
>
> }

***Considerations***

-   **Alias Flexibility**: Using an alias allows for flexibility in
    managing indices. The alias can point to multiple indices, making it
    easier to manage and query data across time-based indices.

-   **Index Patterns**: Ensure that the alias name (customers-current)
    is descriptive and clearly indicates its purpose.

-   **Performance**: Searching using an alias is efficient and does not
    introduce significant overhead compared to searching directly on
    indices. ***Clean-up (optional)***

• Delete the 2 indices

> DELETE customers-2024-01
>
> DELETE customers-2024-02

***Documentation***

-   [[Index
    Aliases]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html)

-   [[Bulk
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html)

-   [[Search
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html)

### Example 2: Creating index aliases for logging data with filtering and routing {.unnumbered}

This is a slightly more complex use of an index alias. It includes a
custom configuration for each index defined in the alias and any custom
**filtering** and/or **routing** that is required.

***Requirements***

-   Three indices (logs_2022, logs_2023, and logs_2024) with documents
    containing log data (message, level, timestamp)

-   An index alias (logs) that points to all three indices with
    filtering and routing based on the log level

-   A search query against the message field to retrieve documents from
    the alias

***Steps***

1.  **Open the Kibana Console** or use a REST client.

2.  Create the logs_2022, logs_2023, and logs_2024 indices

> PUT logs_2022
>
> {
>
> \"mappings\": {
>
> \"properties\": {
>
> \"message\" : {
>
> \"type\": \"text\"
>
> },
>
> \"level\" : {
>
> \"type\": \"keyword\"
>
> },
>
> \"timestamp\" : {
>
> \"type\": \"date\"
>
> }
>
> }
>
> }
>
> }
>
> PUT logs_2023
>
> {
>
> \"mappings\": {
>
> \"properties\": {
>
> \"message\" : {
>
> \"type\": \"text\"
>
> },
>
> \"level\" : {
>
> \"type\": \"keyword\"
>
> },
>
> \"timestamp\" : {
>
> \"type\": \"date\"
>
> }
>
> }
>
> }
>
> }
>
> PUT logs_2024
>
> {
>
> \"mappings\": {
>
> \"properties\": {
>
> \"message\" : {
>
> \"type\": \"text\"
>
> },
>
> \"level\" : {
>
> \"type\": \"keyword\"
>
> },
>
> \"timestamp\" : {
>
> \"type\": \"date\"
>
> }
>
> }
>
> }
>
> }
>
> 3\. Create an index alias (logs) with filtering and routing (this must
> be done before indexing any documents)
>
> POST \_aliases
>
> {
>
> \"actions\": \[
>
> {
>
> \"add\": {
>
> \"index\": \"logs_2022\",
>
> \"alias\": \"logs\",
>
> \"filter\": {
>
> \"term\": {
>
> \"level\": \"ERROR\"
>
> }
>
> },
>
> \"routing\": \"error\"
>
> }
>
> },
>
> {
>
> \"add\": {
>
> \"index\": \"logs_2023\",
>
> \"alias\": \"logs\",
>
> \"filter\": {
>
> \"term\": {
>
> \"level\": \"INFO\"
>
> }
>
> },
>
> \"routing\": \"info\"
>
> }
>
> },
>
> {
>
> \"add\": {
>
> \"index\": \"logs_2024\",
>
> \"alias\": \"logs\",
>
> \"filter\": {
>
> \"term\": {
>
> \"level\": \"DEBUG\"
>
> }
>
> },
>
> \"routing\": \"debug\"
>
> }
>
> }
>
> \]
>
> }
>
> 4\. Index sample documents
>
> POST /logs_2022/\_bulk
>
> { \"index\": { \"\_id\": \"1\" } }
>
> { \"message\": \"Error occurred\", \"level\": \"ERROR\",
> \"timestamp\": \"2022-01-
>
> 01T12:00:00Z\" }
>
> { \"index\": { \"\_id\": \"2\" } }
>
> { \"message\": \"Error occurred\", \"level\": \"ERROR\",
> \"timestamp\": \"2022-01-
>
> 01T12:00:00Z\" }
>
> POST /logs_2023/\_bulk
>
> { \"index\": { \"\_id\": \"1\" } }
>
> { \"message\": \"Info message\", \"level\": \"INFO\", \"timestamp\":
> \"2022-01-
>
> 01T12:00:01Z\" }
>
> { \"index\": { \"\_id\": \"2\" } }
>
> { \"message\": \"Info message\", \"level\": \"INFO\", \"timestamp\":
> \"2022-01-
>
> 01T12:00:01Z\" }
>
> POST /logs_2024/\_bulk
>
> { \"index\": { \"\_id\": \"1\" } }
>
> { \"message\": \"Debug message\", \"level\": \"DEBUG\", \"timestamp\":
> \"2022-01-
>
> 01T12:00:01Z\" }
>
> { \"index\": { \"\_id\": \"2\" } }
>
> { \"message\": \"Debug message\", \"level\": \"DEBUG\", \"timestamp\":
> \"2022-01-
>
> 01T12:00:01Z\" }
>
> 4\. Execute a search query using the logs alias
>
> GET logs/\_search
>
> {
>
> \"query\": {
>
> \"terms\": {
>
> \"message\": \[
>
> \"error\",
>
> \"info\"
>
> \]
>
> }
>
> }
>
> }

***Test***

-   Verify the alias was created GET \_alias/logs

-   Confirm 4 documents returned when executing the test query: 2 from
    logs_2022 and 2 from logs_2023

***Considerations***

-   The index must be set up in the proper order for the query using the
    alias w/filtering and routing to work:

> ◦ create the index
>
> ◦ create the alias using filtering and/or routing
>
> ◦ index the documents

-   Index aliases with filtering and routing allow you to control which
    documents are included in the alias based on specific criteria.

-   In this example, we created an alias that points to three indices
    with filtering based on the log level and routing to separate
    indices.

***Clean-up (optional)***

• Delete the indices

> DELETE logs_2022
>
> DELETE logs_2023
>
> DELETE logs_2024

***Documentation***

-   [[Index
    Aliases]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html)

-   [[Bulk
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html)

-   [[Search
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html)

## Task: Define and use a search template

### Example 1: Creating Search Templates for Product Search {.unnumbered}

***Requirements***

-   Create an index and populate it with example product documents

-   Define a search template for querying products based on a keyword

***Steps***

1.  **Open the Kibana Console** or use a REST Client

2.  Create the index as a side-effect of indexing sample documents

> POST /products/\_bulk
>
> { \"index\": { \"\_id\": \"1\" } } { \"name\": \"Laptop\",
> \"description\": \"A high-performance laptop\", \"price\":
>
> 999.99 }
>
> { \"index\": { \"\_id\": \"2\" } } { \"name\": \"Smartphone\",
> \"description\": \"A latest model smartphone\", \"price\":
>
> 799.99 }
>
> { \"index\": { \"\_id\": \"3\" } }
>
> { \"name\": \"Tablet\", \"description\": \"A new tablet with excellent
> features\",
>
> \"price\": 499.99 }

3.  Define a search template

> POST /\_scripts/product_search
>
> {
>
> \"script\": {
>
> \"lang\": \"mustache\",
>
> \"source\": {
>
> \"query\": {
>
> \"match\": {
>
> \"description\": \"{{query_string}}\"
>
> }
>
> }
>
> }
>
> }
>
> }
>
> 4\. **Use the Search Template**
>
> POST /\_search/template
>
> {
>
> \"id\": \"product_search\",
>
> \"params\": {
>
> \"query_string\": \"laptop\"
>
> }
>
> }

***Test***

1\. **Perform the Search Using the Template** Example of expected
response format:

> {
>
> \"hits\": {
>
> \"total\": {
>
> \"value\": 1,
>
> \"relation\": \"eq\"
>
> },
>
> \"hits\": \[
>
> {
>
> \"\_index\": \"products\",
>
> \"\_id\": \"1\",
>
> \"\_source\": {
>
> \"name\": \"Laptop\",
>
> \"description\": \"A high-performance laptop\",
>
> \"price\": 999.99
>
> }
>
> }
>
> \]
>
> }
>
> }

***Considerations***

-   **Template Flexibility**: Using a search template allows for
    reusable and parameterized queries, reducing the need to write
    complex queries multiple times.

-   **Performance**: Search templates can improve performance by reusing
    the query logic and reducing the overhead of constructing queries
    dynamically.

-   **Template Language**: Mustache is used as the templating language,
    providing a simple and powerful way to define dynamic queries.

***Clean-up (optional)***

Documentation

-   [[Search
    Templates]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html)

-   [[Bulk
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html)

-   [[Search
    API]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html)

### Example 2: Creating search templates for an e-commerce product catalog with sorting and pagination {.unnumbered}

***Requirements***

-   An Elasticsearch index named \"products\" with documents containing
    fields like \"name\", \"price\", \"category\", \"description\",
    \"rating\", etc.

-   Define a search template to search for products based on a
    user-provided query string, category filter, sort order, and
    pagination.

***Steps***

1.  **Open the Kibana Console** or use a REST client.

2.  Index sample product documents using the /\_bulk endpoint:

> POST /products/\_bulk
>
> {\"index\":{\"\_id\":1}}
>
> {\"name\":\"Product A\", \"price\":99.99,
> \"category\":\"Electronics\",
>
> \"description\":\"High-quality product\", \"rating\":4.2}
>
> {\"index\":{\"\_id\":2}}
>
> {\"name\":\"Product B\", \"price\":49.99, \"category\":\"Books\",
> \"description\":\"Best-
>
> selling novel\", \"rating\":4.5}
>
> {\"index\":{\"\_id\":3}}
>
> {\"name\":\"Product C\", \"price\":149.99,
> \"category\":\"Electronics\",
>
> \"description\":\"Top-rated gadget\", \"rating\":3.8}
>
> {\"index\":{\"\_id\":4}}
>
> {\"name\":\"Product D\", \"price\":29.99, \"category\":\"Clothing\",
>
> \"description\":\"Stylish t-shirt\", \"rating\":4.1}
>
> 3\. Define the search template:
>
> PUT /\_scripts/product_search
>
> {
>
> \"script\": {
>
> \"lang\": \"mustache\",
>
> \"source\": {
>
> \"query\": {
>
> \"bool\": {
>
> \"must\": \[
>
> {
>
> \"multi_match\": {
>
> \"query\": \"{{query_string}}\",
>
> \"fields\": \[\"name\", \"description\"\]
>
> }
>
> }
>
> \],
>
> \"filter\": \[
>
> {
>
> \"term\": {
>
> \"category\": \"{{category}}\"
>
> }
>
> }
>
> \]
>
> }
>
> },
>
> \"sort\": \[
>
> {
>
> \"{{sort_field}}\": \"{{sort_order}}\"
>
> }
>
> \],
>
> \"from\": \"{{from}}\",
>
> \"size\": \"{{size}}\"
>
> }
>
> }
>
> }
>
> 4\. Use the search template with sorting and pagination:
>
> GET /products/\_search/template
>
> {
>
> \"id\": \"product_search\",
>
> \"params\": {
>
> \"query_string\": \"product\",
>
> \"category\": \"Electronics\",
>
> \"sort_field\": \"price\",
>
> \"sort_order\": \"desc\",
>
> \"from\": 0,
>
> \"size\": 2
>
> }

} ***Test***

-   Execute the search template query, and it should return the first 2
    documents matching the provided query string (\"product\"), category
    filter (\"Electronics\"), sorted by price in descending order.

-   To retrieve the next page of results, update the from parameter in
    the params object and execute the query again.

***Considerations***

-   The search template includes sorting and pagination parameters
    (sort_field, sort_order, from, size).

-   The sort parameter in the template specifies the field and order for
    sorting the results.

-   The from and size parameters control the pagination of the results.

-   The params object in the search template request provides the values
    for all placeholders in the template.

***Clean-up (optional)*** Documentation

-   [[Elasticsearch Search
    Template]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html)

-   [[Mustache Language]{.underline}](https://mustache.github.io/)

-   [[Scripting in
    Elasticsearch]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html)

-   [[Sort Search
    Results]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html)

-   [[Paginate Search
    Results]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html)

### Example 3: Creating search templates for an e-commerce product catalog with nested queries, sorting, pagination, and aggregations {.unnumbered}

***Requirements***

-   An Elasticsearch index named \"products\" with documents containing
    fields like \"name\", \"price\", \"category\", \"description\",
    \"rating\", \"tags\", \"specifications\" (nested object), etc.

-   Define a search template to search for products based on a
    user-provided query string, category filter, tag filter, sort order,
    pagination, and include aggregations for faceted search.

***Steps***

1.  **Open the Kibana Console** or use a REST client

2.  Index sample product documents using the /\_bulk endpoint

> POST /products/\_bulk
>
> {\"index\":{\"\_id\":1}}
>
> {\"name\":\"Product A\", \"price\":99.99,
> \"category\":\"Electronics\",
>
> \"description\":\"High-quality product\", \"rating\":4.2,
> \"tags\":\[\"electronics\",
>
> \"gadget\"\], \"specifications\":{\"ram\":\"8GB\",
> \"storage\":\"256GB\"}}
>
> {\"index\":{\"\_id\":2}}
>
> {\"name\":\"Product B\", \"price\":49.99, \"category\":\"Books\",
> \"description\":\"Best-
>
> selling novel\", \"rating\":4.5, \"tags\":\[\"book\", \"fiction\"\]}
>
> {\"index\":{\"\_id\":3}}
>
> {\"name\":\"Product C\", \"price\":149.99,
> \"category\":\"Electronics\",
>
> \"description\":\"Top-rated gadget\", \"rating\":3.8,
> \"tags\":\[\"electronics\",
>
> \"laptop\"\], \"specifications\":{\"ram\":\"16GB\",
> \"storage\":\"512GB\"}}
>
> {\"index\":{\"\_id\":4}}
>
> {\"name\":\"Product D\", \"price\":29.99, \"category\":\"Clothing\",
>
> \"description\":\"Stylish t-shirt\", \"rating\":4.1,
> \"tags\":\[\"clothing\", \"tshirt\"\]}
>
> 3\. Define the search template
>
> PUT /\_scripts/product_search
>
> {
>
> \"script\": {
>
> \"lang\": \"mustache\",
>
> \"source\": {
>
> \"query\": {
>
> \"bool\": {
>
> \"must\": \[
>
> {
>
> \"multi_match\": {
>
> \"query\": \"{{query_string}}\",
>
> \"fields\": \[\"name\", \"description\"\]
>
> }
>
> }
>
> \],
>
> \"filter\": \[
>
> {
>
> \"term\": {
>
> \"category\": \"{{category}}\"
>
> }
>
> },
>
> {
>
> \"terms\": {
>
> \"tags\": \"{{tags}}\"
>
> }
>
> }
>
> \]
>
> }
>
> },
>
> \"sort\": \[
>
> {
>
> \"{{sort_field}}\": \"{{sort_order}}\"
>
> }
>
> \],
>
> \"from\": \"{{from}}\",
>
> \"size\": \"{{size}}\",
>
> \"aggs\": {
>
> \"categories\": {
>
> \"terms\": {
>
> \"field\": \"category\"
>
> }
>
> },
>
> \"tags\": {
>
> \"terms\": {
>
> \"field\": \"tags\"
>
> }
>
> },
>
> \"specifications\": {
>
> \"nested\": {
>
> \"path\": \"specifications\"
>
> },
>
> \"aggs\": {
>
> \"ram\": {
>
> \"terms\": {
>
> \"field\": \"specifications.ram\"
>
> }
>
> },
>
> \"storage\": {
>
> \"terms\": {
>
> \"field\": \"specifications.storage\"
>
> }
>
> }
>
> }
>
> }
>
> }
>
> }
>
> }
>
> }
>
> 4\. Use the search template with sorting, pagination, and
> aggregations:
>
> GET /products/\_search/template
>
> {
>
> \"id\": \"product_search\",
>
> \"params\": {
>
> \"query_string\": \"product\",
>
> \"category\": \"Electronics\",
>
> \"tags\": \[\"electronics\", \"gadget\"\],
>
> \"sort_field\": \"price\",
>
> \"sort_order\": \"desc\",
>
> \"from\": 0,
>
> \"size\": 2
>
> }

} ***Test***

-   Execute the search template query, and it should return the first 2
    documents matching the provided query string (\"product\"), category
    filter (\"Electronics\"), tag filter (\[\"electronics\",
    \"gadget\"\]), sorted by price in descending order.

> ◦ The response should also include aggregations for categories, tags,
> and nested specifications (ram and storage).To retrieve the next page
> of results, update the from parameter in the params object and execute
> the query again.

***Considerations***

-   The search template includes nested queries, filters, sorting,
    pagination, and aggregations.

-   The tags filter uses a terms query to match documents with any of
    the specified tags.

-   The specifications aggregation is a nested aggregation that
    aggregates the nested specifications object.

-   The aggs section in the template defines the aggregations to be
    included in the search results.

-   The params object in the search template request provides the values
    for all placeholders in the template.

***Clean-up (optional)*** Documentation

-   [[Elasticsearch Search
    Template]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html)

-   [[Mustache Language]{.underline}](https://mustache.github.io/)

-   [[Scripting in
    Elasticsearch]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html)

-   [[Sort Search
    Results]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html)

-   [[Paginate Search
    Results]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html)

-   [[Aggregations]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html)

-   [[Nested
    Aggregations]{.underline}](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-nested-aggregation.html)
